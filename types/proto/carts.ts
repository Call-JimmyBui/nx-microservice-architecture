// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v3.20.3
// source: carts.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";
import { Empty } from "./google/protobuf/empty";

export const protobufPackage = "carts";

/** apps/cart-service/src/proto/cart.proto */

export interface CartItemProto {
  productId: string;
  quantity: number;
  /** Có thể thêm thông tin sản phẩm chi tiết nếu muốn, ví dụ: name, price */
  productName: string;
  productPrice: number;
}

export interface CartProto {
  userId: string;
  items: CartItemProto[];
  /** Tổng tiền giỏ hàng */
  totalAmount: number;
}

export interface AddItemToCartRequest {
  userId: string;
  productId: string;
  quantity: number;
}

export interface GetCartRequest {
  userId: string;
}

export interface UpdateCartItemQuantityRequest {
  userId: string;
  productId: string;
  /** Số lượng mới */
  quantity: number;
}

export interface RemoveItemFromCartRequest {
  userId: string;
  productId: string;
}

export interface ClearCartRequest {
  userId: string;
}

export interface CartResponse {
  cart: CartProto | undefined;
}

export const CARTS_PACKAGE_NAME = "carts";

export interface CartServiceClient {
  addItemToCart(request: AddItemToCartRequest): Observable<CartResponse>;

  getCart(request: GetCartRequest): Observable<CartResponse>;

  updateCartItemQuantity(request: UpdateCartItemQuantityRequest): Observable<CartResponse>;

  removeItemFromCart(request: RemoveItemFromCartRequest): Observable<CartResponse>;

  clearCart(request: ClearCartRequest): Observable<Empty>;
}

export interface CartServiceController {
  addItemToCart(request: AddItemToCartRequest): Promise<CartResponse> | Observable<CartResponse> | CartResponse;

  getCart(request: GetCartRequest): Promise<CartResponse> | Observable<CartResponse> | CartResponse;

  updateCartItemQuantity(
    request: UpdateCartItemQuantityRequest,
  ): Promise<CartResponse> | Observable<CartResponse> | CartResponse;

  removeItemFromCart(
    request: RemoveItemFromCartRequest,
  ): Promise<CartResponse> | Observable<CartResponse> | CartResponse;

  clearCart(request: ClearCartRequest): void;
}

export function CartServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      "addItemToCart",
      "getCart",
      "updateCartItemQuantity",
      "removeItemFromCart",
      "clearCart",
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("CartService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("CartService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const CART_SERVICE_NAME = "CartService";
