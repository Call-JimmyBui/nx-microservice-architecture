// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v3.20.3
// source: notifications.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";
import { Empty } from "./google/protobuf/empty";

export const protobufPackage = "notifications";

/** File: apps/notification-service/src/proto/notification.proto */

export enum NotificationTypeProto {
  EMAIL = 0,
  SMS = 1,
  PUSH_NOTIFICATION = 2,
  UNRECOGNIZED = -1,
}

export interface SendEmailRequest {
  recipientEmail: string;
  subject: string;
  /** Optional: senderEmail, htmlBody */
  body: string;
}

export interface SendSmsRequest {
  recipientPhoneNumber: string;
  /** Optional: senderId */
  message: string;
}

export interface SendPushNotificationRequest {
  /** User ID để tìm thiết bị nhận */
  userId: string;
  title: string;
  /** Optional: payload (JSON string), imageUrl, targetScreen */
  body: string;
}

export const NOTIFICATIONS_PACKAGE_NAME = "notifications";

export interface NotificationServiceClient {
  sendEmail(request: SendEmailRequest): Observable<Empty>;

  sendSms(request: SendSmsRequest): Observable<Empty>;

  /** Có thể thêm GetNotificationHistory, MarkNotificationAsRead, v.v. */

  sendPushNotification(request: SendPushNotificationRequest): Observable<Empty>;
}

export interface NotificationServiceController {
  sendEmail(request: SendEmailRequest): void;

  sendSms(request: SendSmsRequest): void;

  /** Có thể thêm GetNotificationHistory, MarkNotificationAsRead, v.v. */

  sendPushNotification(request: SendPushNotificationRequest): void;
}

export function NotificationServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["sendEmail", "sendSms", "sendPushNotification"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("NotificationService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("NotificationService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const NOTIFICATION_SERVICE_NAME = "NotificationService";
