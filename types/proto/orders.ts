// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v3.20.3
// source: orders.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";
import { Timestamp } from "./google/protobuf/timestamp";
import { ProductProto } from "./products";

export const protobufPackage = "orders";

/** File: apps/order-service/src/proto/orders.proto */

export enum OrderStatusProto {
  PENDING = 0,
  PROCESSING = 1,
  SHIPPED = 2,
  DELIVERED = 3,
  CANCELLED = 4,
  PAYMENT_FAILED = 5,
  UNRECOGNIZED = -1,
}

export interface OrderItemProto {
  productId: string;
  quantity: number;
  /** Giá tại thời điểm đặt hàng */
  priceAtOrder: number;
  /** Có thể nhúng thông tin sản phẩm */
  productDetails?: ProductProto | undefined;
}

export interface OrderProto {
  id: string;
  userId: string;
  items: OrderItemProto[];
  totalAmount: number;
  status: OrderStatusProto;
  shippingAddress: string;
  paymentMethod: string;
  createdAt:
    | Timestamp
    | undefined;
  /** optional users.UserProto userDetails = 10; // Có thể nhúng thông tin người dùng */
  updatedAt: Timestamp | undefined;
}

export interface CreateOrderRequest {
  userId: string;
  /** Chỉ cần productId và quantity */
  items: OrderItemProto[];
  shippingAddress: string;
  paymentMethod: string;
}

export interface GetOrderByIdRequest {
  id: string;
}

export interface GetOrdersByUserIdRequest {
  userId: string;
  page: number;
  limit: number;
}

export interface UpdateOrderStatusRequest {
  id: string;
  status: OrderStatusProto;
  /** Ghi chú lý do cập nhật trạng thái */
  note?: string | undefined;
}

export interface OrderResponse {
  order: OrderProto | undefined;
}

export interface OrdersResponse {
  orders: OrderProto[];
  totalCount: number;
  page: number;
  limit: number;
}

export const ORDERS_PACKAGE_NAME = "orders";

export interface OrderServiceClient {
  createOrder(request: CreateOrderRequest): Observable<OrderResponse>;

  getOrderById(request: GetOrderByIdRequest): Observable<OrderResponse>;

  getOrdersByUserId(request: GetOrdersByUserIdRequest): Observable<OrdersResponse>;

  updateOrderStatus(request: UpdateOrderStatusRequest): Observable<OrderResponse>;
}

export interface OrderServiceController {
  createOrder(request: CreateOrderRequest): Promise<OrderResponse> | Observable<OrderResponse> | OrderResponse;

  getOrderById(request: GetOrderByIdRequest): Promise<OrderResponse> | Observable<OrderResponse> | OrderResponse;

  getOrdersByUserId(
    request: GetOrdersByUserIdRequest,
  ): Promise<OrdersResponse> | Observable<OrdersResponse> | OrdersResponse;

  updateOrderStatus(
    request: UpdateOrderStatusRequest,
  ): Promise<OrderResponse> | Observable<OrderResponse> | OrderResponse;
}

export function OrderServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["createOrder", "getOrderById", "getOrdersByUserId", "updateOrderStatus"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("OrderService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("OrderService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const ORDER_SERVICE_NAME = "OrderService";
