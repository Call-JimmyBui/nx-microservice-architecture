// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v3.20.3
// source: payments.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";
import { Timestamp } from "./google/protobuf/timestamp";

export const protobufPackage = "payments";

/** File: apps/payment-service/src/proto/payment.proto */

export enum PaymentStatusProto {
  PENDING = 0,
  SUCCESS = 1,
  FAILED = 2,
  REFUNDED = 3,
  UNRECOGNIZED = -1,
}

export interface PaymentProto {
  id: string;
  orderId: string;
  userId: string;
  amount: number;
  currency: string;
  status: PaymentStatusProto;
  paymentMethod: string;
  /** ID từ cổng thanh toán bên thứ ba */
  transactionId: string;
  createdAt: Timestamp | undefined;
  updatedAt: Timestamp | undefined;
}

export interface ProcessPaymentRequest {
  orderId: string;
  userId: string;
  amount: number;
  currency: string;
  /** Có thể thêm thông tin thẻ tín dụng hoặc token thanh toán */
  paymentMethod: string;
}

export interface GetPaymentStatusRequest {
  paymentId: string;
  orderId?: string | undefined;
}

export interface PaymentResponse {
  payment: PaymentProto | undefined;
}

export interface PaymentStatusResponse {
  status: PaymentStatusProto;
  message: string;
  /** Có thể trả về toàn bộ payment nếu muốn */
  payment?: PaymentProto | undefined;
}

export const PAYMENTS_PACKAGE_NAME = "payments";

export interface PaymentServiceClient {
  processPayment(request: ProcessPaymentRequest): Observable<PaymentResponse>;

  /** Có thể thêm RefundPayment, CapturePayment, v.v. */

  getPaymentStatus(request: GetPaymentStatusRequest): Observable<PaymentStatusResponse>;
}

export interface PaymentServiceController {
  processPayment(
    request: ProcessPaymentRequest,
  ): Promise<PaymentResponse> | Observable<PaymentResponse> | PaymentResponse;

  /** Có thể thêm RefundPayment, CapturePayment, v.v. */

  getPaymentStatus(
    request: GetPaymentStatusRequest,
  ): Promise<PaymentStatusResponse> | Observable<PaymentStatusResponse> | PaymentStatusResponse;
}

export function PaymentServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["processPayment", "getPaymentStatus"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("PaymentService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("PaymentService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const PAYMENT_SERVICE_NAME = "PaymentService";
