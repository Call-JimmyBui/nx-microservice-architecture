// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v3.20.3
// source: products.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";
import { Empty } from "./google/protobuf/empty";
import { Timestamp } from "./google/protobuf/timestamp";

export const protobufPackage = "products";

export interface ProductProto {
  id: string;
  name: string;
  description?: string | undefined;
  price: number;
  stockQuantity: number;
  imageUrl?: string | undefined;
  createdAt: Timestamp | undefined;
  updatedAt: Timestamp | undefined;
  isActive: boolean;
  /** ID của Category liên kết */
  categoryId: string;
  category?: CategoryProto | undefined;
}

export interface CreateProductRequest {
  name: string;
  description?: string | undefined;
  price: number;
  stockQuantity: number;
  imageUrl?: string | undefined;
  categoryId: string;
}

export interface GetProductByIdRequest {
  id: string;
}

/** <-- ĐÃ CÓ */
export interface GetProductsByIdsRequest {
  ids: string[];
}

export interface GetAllProductsRequest {
  /** Có thể thêm pagination, filter ở đây */
  page: number;
  limit: number;
  search?: string | undefined;
  categoryId?: string | undefined;
}

export interface UpdateProductRequest {
  id: string;
  name?: string | undefined;
  description?: string | undefined;
  price?: number | undefined;
  stockQuantity?: number | undefined;
  imageUrl?: string | undefined;
  isActive?: boolean | undefined;
  categoryId?: string | undefined;
}

export interface GetProductsByCategoryIdRequest {
  categoryId: string;
}

export interface CheckProductStockRequest {
  productId: string;
  quantity: number;
}

export interface CheckProductStockResponse {
  isAvailable: boolean;
  currentStock: number;
}

/** <-- THÊM CÁC MESSAGE NÀY NẾU CHƯA CÓ TRONG FILE products.proto CỦA BẠN */
export interface DecreaseStockRequest {
  productId: string;
  quantity: number;
}

export interface DecreaseStockResponse {
  success: boolean;
  message?: string | undefined;
  newStockQuantity?: number | undefined;
}

export interface ProductResponse {
  product: ProductProto | undefined;
}

export interface DeleteProductRequest {
  productId: string;
}

export interface DeleteProductResponse {
  success: boolean;
  message: string;
}

export interface ProductsResponse {
  products: ProductProto[];
  totalCount: number;
  page: number;
  limit: number;
}

export interface CategoryProto {
  id: string;
  name: string;
  description?: string | undefined;
  createdAt: Timestamp | undefined;
  updatedAt: Timestamp | undefined;
}

export interface CreateCategoryRequest {
  name: string;
  description?: string | undefined;
}

export interface GetCategoryByIdRequest {
  id: string;
}

export interface UpdateCategoryRequest {
  id: string;
  name?: string | undefined;
  description?: string | undefined;
}

export interface DeleteCategoryRequest {
  id: string;
}

export interface CategoryResponse {
  category: CategoryProto | undefined;
}

export interface CategoriesResponse {
  categories: CategoryProto[];
}

export const PRODUCTS_PACKAGE_NAME = "products";

export interface ProductServiceClient {
  /** Products RPCs */

  createProduct(request: CreateProductRequest): Observable<ProductResponse>;

  getProductById(request: GetProductByIdRequest): Observable<ProductResponse>;

  /** <-- ĐÃ CÓ */

  getProductsByIds(request: GetProductsByIdsRequest): Observable<ProductsResponse>;

  getAllProducts(request: GetAllProductsRequest): Observable<ProductsResponse>;

  updateProduct(request: UpdateProductRequest): Observable<ProductResponse>;

  deleteProduct(request: DeleteProductRequest): Observable<Empty>;

  getProductsByCategoryId(request: GetProductsByCategoryIdRequest): Observable<ProductsResponse>;

  checkProductStock(request: CheckProductStockRequest): Observable<CheckProductStockResponse>;

  /** <-- Cần THÊM RPC này */

  decreaseStock(request: DecreaseStockRequest): Observable<DecreaseStockResponse>;
}

export interface ProductServiceController {
  /** Products RPCs */

  createProduct(
    request: CreateProductRequest,
  ): Promise<ProductResponse> | Observable<ProductResponse> | ProductResponse;

  getProductById(
    request: GetProductByIdRequest,
  ): Promise<ProductResponse> | Observable<ProductResponse> | ProductResponse;

  /** <-- ĐÃ CÓ */

  getProductsByIds(
    request: GetProductsByIdsRequest,
  ): Promise<ProductsResponse> | Observable<ProductsResponse> | ProductsResponse;

  getAllProducts(
    request: GetAllProductsRequest,
  ): Promise<ProductsResponse> | Observable<ProductsResponse> | ProductsResponse;

  updateProduct(
    request: UpdateProductRequest,
  ): Promise<ProductResponse> | Observable<ProductResponse> | ProductResponse;

  deleteProduct(request: DeleteProductRequest): void;

  getProductsByCategoryId(
    request: GetProductsByCategoryIdRequest,
  ): Promise<ProductsResponse> | Observable<ProductsResponse> | ProductsResponse;

  checkProductStock(
    request: CheckProductStockRequest,
  ): Promise<CheckProductStockResponse> | Observable<CheckProductStockResponse> | CheckProductStockResponse;

  /** <-- Cần THÊM RPC này */

  decreaseStock(
    request: DecreaseStockRequest,
  ): Promise<DecreaseStockResponse> | Observable<DecreaseStockResponse> | DecreaseStockResponse;
}

export function ProductServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      "createProduct",
      "getProductById",
      "getProductsByIds",
      "getAllProducts",
      "updateProduct",
      "deleteProduct",
      "getProductsByCategoryId",
      "checkProductStock",
      "decreaseStock",
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("ProductService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("ProductService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const PRODUCT_SERVICE_NAME = "ProductService";

/** Tên service mới */

export interface CategoryServiceClient {
  createCategory(request: CreateCategoryRequest): Observable<CategoryResponse>;

  getCategoryById(request: GetCategoryByIdRequest): Observable<CategoryResponse>;

  getAllCategories(request: Empty): Observable<CategoriesResponse>;

  updateCategory(request: UpdateCategoryRequest): Observable<CategoryResponse>;

  deleteCategory(request: DeleteCategoryRequest): Observable<Empty>;
}

/** Tên service mới */

export interface CategoryServiceController {
  createCategory(
    request: CreateCategoryRequest,
  ): Promise<CategoryResponse> | Observable<CategoryResponse> | CategoryResponse;

  getCategoryById(
    request: GetCategoryByIdRequest,
  ): Promise<CategoryResponse> | Observable<CategoryResponse> | CategoryResponse;

  getAllCategories(request: Empty): Promise<CategoriesResponse> | Observable<CategoriesResponse> | CategoriesResponse;

  updateCategory(
    request: UpdateCategoryRequest,
  ): Promise<CategoryResponse> | Observable<CategoryResponse> | CategoryResponse;

  deleteCategory(request: DeleteCategoryRequest): void;
}

export function CategoryServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      "createCategory",
      "getCategoryById",
      "getAllCategories",
      "updateCategory",
      "deleteCategory",
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("CategoryService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("CategoryService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const CATEGORY_SERVICE_NAME = "CategoryService";
