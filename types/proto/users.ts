// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v3.20.3
// source: users.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";
import { Empty } from "./google/protobuf/empty";
import { Timestamp } from "./google/protobuf/timestamp";

export const protobufPackage = "users";

export enum UserRoleProto {
  CUSTOMER = 0,
  ADMIN = 1,
  SELLER = 2,
  UNRECOGNIZED = -1,
}

/** Basic User Message (dùng cho phản hồi) */
export interface UserProto {
  id: string;
  username: string;
  email: string;
  phoneNumber?: string | undefined;
  firstName?: string | undefined;
  lastName?: string | undefined;
  createdAt: Timestamp | undefined;
  updatedAt: Timestamp | undefined;
  isActive: boolean;
  role: UserRoleProto;
  deviceToken: string;
}

/** Request khi tạo người dùng */
export interface CreateUserRequest {
  username: string;
  password: string;
  email: string;
  phoneNumber?: string | undefined;
  firstName?: string | undefined;
  lastName?: string | undefined;
  role?: UserRoleProto | undefined;
}

/** Request khi lấy người dùng theo ID */
export interface GetUserByIdRequest {
  id: string;
}

/** Request khi lấy người dùng theo Username */
export interface GetUserByUsernameRequest {
  username: string;
}

/** Request khi cập nhật người dùng */
export interface UpdateUserRequest {
  id: string;
  username?: string | undefined;
  email?: string | undefined;
  phoneNumber?: string | undefined;
  firstName?: string | undefined;
  lastName?: string | undefined;
  isActive?: boolean | undefined;
  role?: UserRoleProto | undefined;
}

/** Request khi xóa người dùng */
export interface DeleteUserRequest {
  id: string;
}

/** Request khi xác thực người dùng (login) */
export interface AuthenticateUserRequest {
  username: string;
  password: string;
}

/** Phản hồi khi xác thực người dùng */
export interface AuthenticationResponse {
  success: boolean;
  message: string;
  accessToken?: string | undefined;
  user?: UserProto | undefined;
}

/** Phản hồi chung cho các thao tác User (chứa 1 User) */
export interface UserResponse {
  user?: UserProto | undefined;
}

/** Phản hồi cho GetAllUsers (chứa danh sách User) */
export interface UsersResponse {
  users: UserProto[];
}

export const USERS_PACKAGE_NAME = "users";

export interface UserServiceClient {
  /** RPC để tạo người dùng mới */

  createUser(request: CreateUserRequest): Observable<UserResponse>;

  /** RPC để lấy thông tin người dùng theo ID */

  getUserById(request: GetUserByIdRequest): Observable<UserResponse>;

  /** RPC để lấy thông tin người dùng theo Username */

  getUserByUsername(request: GetUserByUsernameRequest): Observable<UserResponse>;

  /** RPC để lấy tất cả người dùng */

  getAllUsers(request: Empty): Observable<UsersResponse>;

  /** RPC để cập nhật thông tin người dùng */

  updateUser(request: UpdateUserRequest): Observable<UserResponse>;

  /** RPC để xóa người dùng */

  deleteUser(request: DeleteUserRequest): Observable<Empty>;

  /** RPC để xác thực người dùng (login) */

  authenticateUser(request: AuthenticateUserRequest): Observable<AuthenticationResponse>;
}

export interface UserServiceController {
  /** RPC để tạo người dùng mới */

  createUser(request: CreateUserRequest): Promise<UserResponse> | Observable<UserResponse> | UserResponse;

  /** RPC để lấy thông tin người dùng theo ID */

  getUserById(request: GetUserByIdRequest): Promise<UserResponse> | Observable<UserResponse> | UserResponse;

  /** RPC để lấy thông tin người dùng theo Username */

  getUserByUsername(request: GetUserByUsernameRequest): Promise<UserResponse> | Observable<UserResponse> | UserResponse;

  /** RPC để lấy tất cả người dùng */

  getAllUsers(request: Empty): Promise<UsersResponse> | Observable<UsersResponse> | UsersResponse;

  /** RPC để cập nhật thông tin người dùng */

  updateUser(request: UpdateUserRequest): Promise<UserResponse> | Observable<UserResponse> | UserResponse;

  /** RPC để xóa người dùng */

  deleteUser(request: DeleteUserRequest): void;

  /** RPC để xác thực người dùng (login) */

  authenticateUser(
    request: AuthenticateUserRequest,
  ): Promise<AuthenticationResponse> | Observable<AuthenticationResponse> | AuthenticationResponse;
}

export function UserServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      "createUser",
      "getUserById",
      "getUserByUsername",
      "getAllUsers",
      "updateUser",
      "deleteUser",
      "authenticateUser",
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("UserService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("UserService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const USER_SERVICE_NAME = "UserService";
